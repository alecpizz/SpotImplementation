#VRML_SIM R2025a utf8
# Generates a maze.
# template language: javascript


PROTO MazeGen [
  field SFVec3f translation 0 0 0
  field SFString mazeString "1111111100000001111111011111110111111101111111011111110111111101"
  field SFInt32 mazeWidth 8
  field SFFloat cellSize 1
  field SFRotation rotation 0 0 1 0
]
{
  %<
    console.log("hello world!");
    console.log(fields.mazeString.value);
    const mazeString = fields.mazeString.value.replace(/\s+/g, '');
    const mazeWidth = fields.mazeWidth.value;
    const cellSize = fields.cellSize.value;
    let columns = []
    let walls = []
    if(mazeString.length % mazeWidth !== 0)
    {
      console.error("maze string length is not a multiple of maze width!");
      return;
    }

    const height = (mazeString.length / mazeWidth);
    const width = mazeWidth;
    for(let y = 0; y < height; y++)
    {
      for(let x = 0; x < width; x++)
      {
        //columns
        let coords = {x: x * cellSize, y: y * cellSize, z: 0}
        columns.push({coordinates: coords});

        const index = y * width + x;
        const aboveIndex = y > 0 ? (y - 1) * width + x : null;
        const belowIndex = y < height - 1 ? (y + 1) * width + x : null;
        const leftIndex = x > 0 ? y * width + (x - 1) : null;
        const rightIndex = x < width - 1 ? y * width + (x + 1) : null;

        const cellValue = mazeString[index];

        if(cellValue === '1')
        {
            if(aboveIndex !== null && mazeString[aboveIndex] === '0')
            {
               console.log("above");
            }

            if(belowIndex !== null && mazeString[belowIndex] === '0')
            {
              console.log("right");
            }

            if(leftIndex !== null && mazeString[leftIndex] === '0')
            {
              console.log("left");
            }

            if(rightIndex !== null && mazeString[rightIndex] === '0')
            {
              console.log("right");
            }
        }
      
      }
    }
  >%
  Transform {
    translation IS translation
    rotation IS rotation
    children [
      %< for (let i = 0; i < columns.length; i++) { >%
        Solid {
          translation %<= columns[i].coordinates.x >% %<= columns[i].coordinates.y >% %<= columns[i].coordinates.z >%
          children [
            Transform {
              scale 0.01 0.01 0.01
              children [
                Shape {
                  appearance PBRAppearance {
                    roughness 1
                    metalness 0
                }
                geometry Mesh {
                  url [
                    "meshes/mazestick.obj"
            ]
          }
        }
              ]
            }
          ]
        }
    %< } >%


      %< for (let i = 0; i < walls.length; i++) { >%



      %< } >%
    ]
  }
 
}
